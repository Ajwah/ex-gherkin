{"gherkinDocument":{"feature":{"location":{"line":1,"column":1},"language":"en","keyword":"Feature","name":"Parameter Types","description":"  Parameter Types allow you to convert primitive string arguments captured in step definitions\n  into more meaningful data types.","children":[{"background":{"id":"3","location":{"line":6,"column":3},"keyword":"Background","description":"    Let's just create a simple feature for testing out parameter types.\n    We also have a Person class that we need to be able to build.","steps":[{"location":{"line":10,"column":5},"keyword":"Given ","text":"a file named \"features/foo.feature\" with:","docString":{"location":{"line":11,"column":7},"content":"Feature:\n  Scenario:\n    Given Joe has gone home\n    When Sally contacts Joe","delimiter":"\"\"\""},"id":"0"},{"location":{"line":17,"column":5},"keyword":"And ","text":"a file named \"features/step_definitions/steps.rb\" with:","docString":{"location":{"line":18,"column":7},"content":"# It works with Regular Expressions\nGiven /([A-Z]\\w+) has gone home/ do |person|\n  expect(person.name).to eq 'Joe'\nend\n\n# It works with Cucumber Expressions too\nWhen \"{person} contacts {person}\" do |contacter, contactee|\n  expect(contacter.name).to eq 'Sally'\n  expect(contactee.name).to eq 'Joe'\nend","delimiter":"\"\"\""},"id":"1"},{"location":{"line":30,"column":5},"keyword":"And ","text":"a file named \"features/support/env.rb\" with:","docString":{"location":{"line":31,"column":7},"content":"class Person\n  attr_reader :name\n\n  def initialize(name)\n    @name = name\n  end\nend","delimiter":"\"\"\""},"id":"2"}]}},{"scenario":{"id":"7","location":{"line":41,"column":3},"keyword":"Scenario","name":"Parameter type defined with ParameterType method","description":"    This is the most basic way to use a parameter type.","steps":[{"location":{"line":44,"column":5},"keyword":"Given ","text":"a file named \"features/support/parameter_types.rb\" with:","docString":{"location":{"line":45,"column":7},"content":"ParameterType(\n  name: 'person',\n  regexp: /[A-Z]\\w+/,\n  transformer: -\u003e (name) { Person.new(name) }\n)","delimiter":"\"\"\""},"id":"4"},{"location":{"line":52,"column":5},"keyword":"When ","text":"I run `cucumber features/foo.feature`","id":"5"},{"location":{"line":53,"column":5},"keyword":"Then ","text":"it should pass","id":"6"}]}},{"scenario":{"id":"12","location":{"line":55,"column":3},"keyword":"Scenario","name":"Parameter type delegating to World","steps":[{"location":{"line":56,"column":5},"keyword":"Given ","text":"a file named \"features/support/parameter_types.rb\" with:","docString":{"location":{"line":57,"column":7},"content":"ParameterType(\n  name: 'person',\n  regexp: /[A-Z]\\w+/,\n  transformer: -\u003e (name) { make_person(name) },\n  use_for_snippets: false\n)","delimiter":"\"\"\""},"id":"8"},{"location":{"line":65,"column":5},"keyword":"Given ","text":"a file named \"features/support/world.rb\" with:","docString":{"location":{"line":66,"column":7},"content":"module MyWorld\n  def make_person(name)\n    Person.new(name)\n  end\nend\nWorld(MyWorld)","delimiter":"\"\"\""},"id":"9"},{"location":{"line":74,"column":5},"keyword":"When ","text":"I run `cucumber features/foo.feature`","id":"10"},{"location":{"line":75,"column":5},"keyword":"Then ","text":"it should pass","id":"11"}]}},{"scenario":{"id":"18","location":{"line":77,"column":3},"keyword":"Scenario","name":"Parameter type with group nested in optional group","steps":[{"location":{"line":78,"column":5},"keyword":"Given ","text":"a file named \"features/support/parameter_types.rb\" with:","docString":{"location":{"line":79,"column":7},"content":"ParameterType(\n  name: \"Employer\",\n  regexp: /Employer(?: \"([^\"]*)\")?/,\n  transformer: -\u003e (name = nil) do\n    name || 'Unnamed'\n  end\n)\n\nParameterType(\n  name: 'person',\n  regexp: /[A-Z]\\w+/,\n  transformer: -\u003e (name) { Person.new(name) }\n)","delimiter":"\"\"\""},"id":"13"},{"location":{"line":94,"column":5},"keyword":"And ","text":"a file named \"features/employees.feature\" with:","docString":{"location":{"line":95,"column":7},"content":"Feature: Employees\n  Scenario: Unnamed\n    Given the Employer\n    Then the name should be \"Unnamed\"","delimiter":"\"\"\""},"id":"14"},{"location":{"line":101,"column":5},"keyword":"And ","text":"a file named \"features/step_definitions/employee_steps.rb\" with:","docString":{"location":{"line":102,"column":7},"content":"Given \"the {Employer}\" do |name|\n  @name = name\nend\n\nGiven \"the name should be {string}\" do |name|\n  expect(name).to eq(@name)\nend","delimiter":"\"\"\""},"id":"15"},{"location":{"line":111,"column":5},"keyword":"When ","text":"I run `cucumber features/employees.feature --strict`","id":"16"},{"location":{"line":112,"column":5},"keyword":"Then ","text":"it should pass","id":"17"}]}}]},"uri":"/Users/kevinjohnson/projects/ex_gherkin/test/support/testdata/full_features/parameter_types.feature"}}
