(1:1)FeatureLine:Feature/After Hooks/
(2:1)Empty://
(3:1)Other:/  After hooks can be used to clean up any state you've altered during your/
(4:1)Other:/  scenario, or to check the status of the scenario and act accordingly./
(5:1)Other://
(6:1)Other:/  You can ask a scenario whether it has failed, for example./
(7:1)Other://
(8:1)Other:/  Mind you, even if it hasn't failed yet, you can still make the scenario/
(9:1)Other:/  fail if your After hook throws an error./
(10:1)Other://
(11:3)BackgroundLine:Background//
(12:5)StepLine:Given /the standard step definitions/
(13:1)Empty://
(14:3)ScenarioLine:Scenario Outline/Retrieve the status of a scenario as a symbol/
(15:5)StepLine:Given /a file named "features/support/debug_hook.rb" with:/
(16:7)DocStringSeparator:"""//
(17:1)Other:/After do |scenario|/
(18:1)Other:/  puts scenario.status.inspect/
(19:1)Other:/end/
(20:7)DocStringSeparator:"""//
(21:5)StepLine:And /a file named "features/result.feature" with:/
(22:7)DocStringSeparator:"""//
(23:1)Other:/Feature:/
(24:1)Other:/  Scenario:/
(25:1)Other:/    Given this step <result>/
(26:7)DocStringSeparator:"""//
(27:5)StepLine:When /I run `cucumber -f progress`/
(28:5)StepLine:Then /the output should contain "<status symbol>"/
(29:1)Empty://
(30:5)ExamplesLine:Examples//
(31:7)TableRow://9:result,22:status symbol
(32:7)TableRow://9:passes,22::passed
(33:7)TableRow://9:fails,22::failed
(34:7)TableRow://9:is pending,22::pending
(35:1)Empty://
(36:3)ScenarioLine:Scenario/Check the failed status of a scenario in a hook/
(37:5)StepLine:Given /a file named "features/support/debug_hook.rb" with:/
(38:7)DocStringSeparator:"""//
(39:1)Other:/After do |scenario|/
(40:1)Other:/  if scenario.failed?/
(41:1)Other:/    puts "eek"/
(42:1)Other:/  end/
(43:1)Other:/end/
(44:7)DocStringSeparator:"""//
(45:5)StepLine:And /a file named "features/fail.feature" with:/
(46:7)DocStringSeparator:"""//
(47:1)Other:/Feature:/
(48:1)Other:/  Scenario:/
(49:1)Other:/    Given this step fails/
(50:7)DocStringSeparator:"""//
(51:5)StepLine:When /I run `cucumber -f progress`/
(52:5)StepLine:Then /the output should contain:/
(53:7)DocStringSeparator:"""//
(54:1)Other:/eek/
(55:7)DocStringSeparator:"""//
(56:1)Empty://
(57:3)ScenarioLine:Scenario/Make a scenario fail from an After hook/
(58:5)StepLine:Given /a file named "features/support/bad_hook.rb" with:/
(59:7)DocStringSeparator:"""//
(60:1)Other:/After do/
(61:1)Other:/  fail 'yikes'/
(62:1)Other:/end/
(63:7)DocStringSeparator:"""//
(64:5)StepLine:And /a file named "features/pass.feature" with:/
(65:7)DocStringSeparator:"""//
(66:1)Other:/Feature:/
(67:1)Other:/  Scenario:/
(68:1)Other:/    Given this step passes/
(69:7)DocStringSeparator:"""//
(70:5)StepLine:When /I run `cucumber -f pretty`/
(71:5)StepLine:Then /it should fail with:/
(72:7)DocStringSeparator:"""//
(73:1)Other:/  Scenario:                # features/pass.feature:2/
(74:1)Other:/    Given this step passes # features/step_definitions/steps.rb:1/
(75:1)Other:/      yikes (RuntimeError)/
(76:1)Other:/      ./features/support/bad_hook.rb:2:in `After'/
(77:7)DocStringSeparator:"""//
(78:1)Empty://
(79:3)ScenarioLine:Scenario/After hooks are executed in reverse order of definition/
(80:5)StepLine:Given /a file named "features/support/hooks.rb" with:/
(81:7)DocStringSeparator:"""//
(82:1)Other:/After do/
(83:1)Other:/  puts "First"/
(84:1)Other:/end/
(85:1)Other://
(86:1)Other:/After do/
(87:1)Other:/  puts "Second"/
(88:1)Other:/end/
(89:7)DocStringSeparator:"""//
(90:5)StepLine:And /a file named "features/pass.feature" with:/
(91:7)DocStringSeparator:"""//
(92:1)Other:/Feature:/
(93:1)Other:/  Scenario:/
(94:1)Other:/    Given this step passes/
(95:7)DocStringSeparator:"""//
(96:5)StepLine:When /I run `cucumber -f progress`/
(97:5)StepLine:Then /the output should contain:/
(98:7)DocStringSeparator:"""//
(99:1)Other:/Second/
(100:1)Other://
(101:1)Other:/First/
(102:7)DocStringSeparator:"""//
EOF
